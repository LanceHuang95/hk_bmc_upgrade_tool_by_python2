guint8 all_sw_chip_temp_get(void);
DECLARATION_CLASS(CLASS_PXE89104_SWITCH)

#define CLASS_PXE89104_SWITCH              "PXE89104Switch"
#define PROPERTY_PXE89104_SWITCH_TEMP      "Temp"

<!-- Switch芯片 -->
<CLASS NAME="PXE89104Switch">
	<!-- Switch芯片关联的Chip -->
	<PROPERTY NAME="RefChip" TYPE="ro">	</PROPERTY>
	<!-- Switch芯片的温度 -->
	<PROPERTY NAME="Temp" TYPE="y">		</PROPERTY>
</CLASS>



<!-- Switch芯片I2c地址 0x6c左移一位0xd8 -->
    <OBJECT NAME="SwitchChip1" CLASS="Chip" TYPE="Physical">
        <PROPERTY NAME="Addr" TYPE="u">	<VALUE>0xd8</VALUE>	</PROPERTY>
        <PROPERTY NAME="AddrWidth" TYPE="y">	<VALUE>1</VALUE>	</PROPERTY>
        <PROPERTY NAME="OffsetWidth" TYPE="y">	<VALUE>0</VALUE>	</PROPERTY>
        <PROPERTY NAME="PrevChip" TYPE="ro">	<VALUE>i2c1_pca9545_chip2</VALUE>	</PROPERTY>
        <PROPERTY NAME="Index" TYPE="u">	<VALUE>0</VALUE>	</PROPERTY>
        <PROPERTY NAME="Level" TYPE="y">	<VALUE>1</VALUE>	</PROPERTY>
        <PROPERTY NAME="LBusType" TYPE="y">	<VALUE>0</VALUE>	</PROPERTY>
        <PROPERTY NAME="RBusType" TYPE="y">	<VALUE>0</VALUE>	</PROPERTY>
        <PROPERTY NAME="LBus" TYPE="ro">	<VALUE>pca9545_chan4</VALUE>	</PROPERTY>
    </OBJECT>
    <OBJECT NAME="SwitchChip2" CLASS="Chip" TYPE="Physical">
        <PROPERTY NAME="Addr" TYPE="u">	<VALUE>0xd8</VALUE>	</PROPERTY>
        <PROPERTY NAME="AddrWidth" TYPE="y">	<VALUE>1</VALUE>	</PROPERTY>
        <PROPERTY NAME="OffsetWidth" TYPE="y">	<VALUE>0</VALUE>	</PROPERTY>
        <PROPERTY NAME="PrevChip" TYPE="ro">	<VALUE>i2c3_pca9545_chip2</VALUE>	</PROPERTY>
        <PROPERTY NAME="Index" TYPE="u">	<VALUE>0</VALUE>	</PROPERTY>
        <PROPERTY NAME="Level" TYPE="y">	<VALUE>1</VALUE>	</PROPERTY>
        <PROPERTY NAME="LBusType" TYPE="y">	<VALUE>0</VALUE>	</PROPERTY>
        <PROPERTY NAME="RBusType" TYPE="y">	<VALUE>0</VALUE>	</PROPERTY>
        <PROPERTY NAME="LBus" TYPE="ro">	<VALUE>pca9545_chan4</VALUE>	</PROPERTY>
    </OBJECT>
 
    <OBJECT NAME="PXE89104Switch1" CLASS="PXE89104Switch" TYPE="Physical">
        <PROPERTY NAME="RefChip" TYPE="ro">	<VALUE>SwitchChip1</VALUE>	</PROPERTY>
        <PROPERTY NAME="Temp" TYPE="y">	    <VALUE>0x00</VALUE>	        </PROPERTY>
    </OBJECT>
 
    <OBJECT NAME="PXE89104Switch2" CLASS="PXE89104Switch" TYPE="Physical">
        <PROPERTY NAME="RefChip" TYPE="ro">	<VALUE>SwitchChip1</VALUE>	</PROPERTY>
        <PROPERTY NAME="Temp" TYPE="y">	    <VALUE>0x00</VALUE>	        </PROPERTY>
    </OBJECT>
 
    <!-- Switch芯片温度传感器 -->
    	<OBJECT NAME="SwitchChip1_Temp" CLASS="ThresholdSensor" TYPE="Logical">
		<PROPERTY NAME="InnerName" TYPE="s">	<VALUE>SwitchChip1TEMP</VALUE>	</PROPERTY>
		<PROPERTY NAME="OwnerId" TYPE="y">	<VALUE>0x20</VALUE>	</PROPERTY>
		<PROPERTY NAME="OwnerLun" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="Number" TYPE="y">	<VALUE>0xFF</VALUE>	</PROPERTY>
		<PROPERTY NAME="EntityId" TYPE="rp">	<VALUE>EntitySWBoard.Id</VALUE>	</PROPERTY>
		<PROPERTY NAME="EntityInstance" TYPE="rp">	<VALUE>EntitySWBoard.Instance</VALUE>	</PROPERTY>
		<PROPERTY NAME="Initialization" TYPE="y">	<VALUE>0x7F</VALUE>	</PROPERTY>
		<PROPERTY NAME="Capabilities" TYPE="y">	<VALUE>0x68</VALUE>	</PROPERTY>
		<PROPERTY NAME="SensorType" TYPE="y">	<VALUE>0x01</VALUE>	</PROPERTY>
		<PROPERTY NAME="SensorTypeStr" TYPE="s">	<VALUE>Temperature</VALUE>	</PROPERTY>
		<PROPERTY NAME="EventReadingType" TYPE="y">	<VALUE>0x01</VALUE>	</PROPERTY>
		<PROPERTY NAME="AssertionMask" TYPE="q">	<VALUE>0x0000</VALUE>	</PROPERTY>
		<PROPERTY NAME="DeassertionMask" TYPE="q">	<VALUE>0x0000</VALUE>	</PROPERTY>
		<PROPERTY NAME="DiscreteReadingMask" TYPE="q">	<VALUE>0x0000</VALUE>	</PROPERTY>
		<PROPERTY NAME="SensorUnit" TYPE="y">	<VALUE>0x80</VALUE>	</PROPERTY>
		<PROPERTY NAME="BaseUnit" TYPE="y">	<VALUE>0x01</VALUE>	</PROPERTY>
		<PROPERTY NAME="ModifierUnit" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="Function" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="M" TYPE="y">	<VALUE>0x64</VALUE>	</PROPERTY>
		<PROPERTY NAME="Tolerance" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="B" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="Accuracy" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="AccuracyExp" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="RBExp" TYPE="y">	<VALUE>0xE0</VALUE>	</PROPERTY>
		<PROPERTY NAME="AnalogFlags" TYPE="y">	<VALUE>0x01</VALUE>	</PROPERTY>
		<PROPERTY NAME="NominalReading" TYPE="y">	<VALUE>0x19</VALUE>	</PROPERTY>
		<PROPERTY NAME="NormalMax" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="NormalMin" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="MaxReading" TYPE="y">	<VALUE>0x7F</VALUE>	</PROPERTY>
		<PROPERTY NAME="MinReading" TYPE="y">	<VALUE>0x80</VALUE>	</PROPERTY>
		<PROPERTY NAME="UpperNonrecoverable" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="UpperCritical" TYPE="y">	<VALUE>0</VALUE>	</PROPERTY>
		<PROPERTY NAME="UpperNoncritical" TYPE="y">	<VALUE>105</VALUE>	</PROPERTY>
		<PROPERTY NAME="LowerNonrecoverable" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="LowerCritical" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="LowerNoncritical" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="PositiveHysteresis" TYPE="y">	<VALUE>0x02</VALUE>	</PROPERTY>
		<PROPERTY NAME="NegativeHysteresis" TYPE="y">	<VALUE>0x02</VALUE>	</PROPERTY>
		<PROPERTY NAME="TypeLengthCode" TYPE="y">	<VALUE>0xFF</VALUE>	</PROPERTY>
		<PROPERTY NAME="SensorName" TYPE="s">	<VALUE>Switch Chip1 Temp</VALUE>	</PROPERTY>
		<PROPERTY NAME="SensorUnitStr" TYPE="s">	<VALUE>unspecified</VALUE>	</PROPERTY>
		<PROPERTY NAME="ReadingRaw" TYPE="rp">	<VALUE>SwitchChip1_temp_monitor.MonSenValue</VALUE>	</PROPERTY>
		<PROPERTY NAME="ReaddingConvert" TYPE="d">	<VALUE>0.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="UpperNonrecoverableConvert" TYPE="d">	<VALUE>0.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="UpperCriticalConvert" TYPE="d">	<VALUE>0.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="UpperNoncriticalConvert" TYPE="d">	<VALUE>105.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="LowerNonrecoverableConvert" TYPE="d">	<VALUE>0.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="LowerCriticalConvert" TYPE="d">	<VALUE>0.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="LowerNoncriticalConvert" TYPE="d">	<VALUE>0.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="PositiveHysteresisConvert" TYPE="d">	<VALUE>2.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="NegativeHysteresisConvert" TYPE="d">	<VALUE>2.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="Health" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="ReadingStatus" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="AssertStatus" TYPE="q">	<VALUE>0x0000</VALUE>	</PROPERTY>
		<PROPERTY NAME="DeassertStatus" TYPE="q">	<VALUE>0x0000</VALUE>	</PROPERTY>
	</OBJECT>
	<!-- Switch芯片温度 -->
	<OBJECT NAME="SwitchChip1_temp_monitor" CLASS="TempMonitor" TYPE="Logical">
		<PROPERTY NAME="SelfTestObject" TYPE="ro">	<VALUE>::succ_dev_test_pwrgd</VALUE>	</PROPERTY>
		<PROPERTY NAME="MonSenValue" TYPE="q">	<VALUE>60</VALUE>	</PROPERTY>
		<PROPERTY NAME="DebouncedCfg" TYPE="ro">	<VALUE>::dbd_midavg_s6</VALUE>	</PROPERTY>
		<PROPERTY NAME="TempValue" TYPE="rp"> <VALUE>PXE89104Switch1.Temp</VALUE>	</PROPERTY>
	</OBJECT>
 
    <OBJECT NAME="SwitchChip2_Temp" CLASS="ThresholdSensor" TYPE="Logical">
		<PROPERTY NAME="InnerName" TYPE="s">	<VALUE>SwitchChip2TEMP</VALUE>	</PROPERTY>
		<PROPERTY NAME="OwnerId" TYPE="y">	<VALUE>0x20</VALUE>	</PROPERTY>
		<PROPERTY NAME="OwnerLun" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="Number" TYPE="y">	<VALUE>0xFF</VALUE>	</PROPERTY>
		<PROPERTY NAME="EntityId" TYPE="rp">	<VALUE>EntitySWBoard.Id</VALUE>	</PROPERTY>
		<PROPERTY NAME="EntityInstance" TYPE="rp">	<VALUE>EntitySWBoard.Instance</VALUE>	</PROPERTY>
		<PROPERTY NAME="Initialization" TYPE="y">	<VALUE>0x7F</VALUE>	</PROPERTY>
		<PROPERTY NAME="Capabilities" TYPE="y">	<VALUE>0x68</VALUE>	</PROPERTY>
		<PROPERTY NAME="SensorType" TYPE="y">	<VALUE>0x01</VALUE>	</PROPERTY>
		<PROPERTY NAME="SensorTypeStr" TYPE="s">	<VALUE>Temperature</VALUE>	</PROPERTY>
		<PROPERTY NAME="EventReadingType" TYPE="y">	<VALUE>0x01</VALUE>	</PROPERTY>
		<PROPERTY NAME="AssertionMask" TYPE="q">	<VALUE>0x0000</VALUE>	</PROPERTY>
		<PROPERTY NAME="DeassertionMask" TYPE="q">	<VALUE>0x0000</VALUE>	</PROPERTY>
		<PROPERTY NAME="DiscreteReadingMask" TYPE="q">	<VALUE>0x0000</VALUE>	</PROPERTY>
		<PROPERTY NAME="SensorUnit" TYPE="y">	<VALUE>0x80</VALUE>	</PROPERTY>
		<PROPERTY NAME="BaseUnit" TYPE="y">	<VALUE>0x01</VALUE>	</PROPERTY>
		<PROPERTY NAME="ModifierUnit" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="Function" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="M" TYPE="y">	<VALUE>0x64</VALUE>	</PROPERTY>
		<PROPERTY NAME="Tolerance" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="B" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="Accuracy" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="AccuracyExp" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="RBExp" TYPE="y">	<VALUE>0xE0</VALUE>	</PROPERTY>
		<PROPERTY NAME="AnalogFlags" TYPE="y">	<VALUE>0x01</VALUE>	</PROPERTY>
		<PROPERTY NAME="NominalReading" TYPE="y">	<VALUE>0x19</VALUE>	</PROPERTY>
		<PROPERTY NAME="NormalMax" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="NormalMin" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="MaxReading" TYPE="y">	<VALUE>0x7F</VALUE>	</PROPERTY>
		<PROPERTY NAME="MinReading" TYPE="y">	<VALUE>0x80</VALUE>	</PROPERTY>
		<PROPERTY NAME="UpperNonrecoverable" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="UpperCritical" TYPE="y">	<VALUE>0</VALUE>	</PROPERTY>
		<PROPERTY NAME="UpperNoncritical" TYPE="y">	<VALUE>105</VALUE>	</PROPERTY>
		<PROPERTY NAME="LowerNonrecoverable" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="LowerCritical" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="LowerNoncritical" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="PositiveHysteresis" TYPE="y">	<VALUE>0x02</VALUE>	</PROPERTY>
		<PROPERTY NAME="NegativeHysteresis" TYPE="y">	<VALUE>0x02</VALUE>	</PROPERTY>
		<PROPERTY NAME="TypeLengthCode" TYPE="y">	<VALUE>0xFF</VALUE>	</PROPERTY>
		<PROPERTY NAME="SensorName" TYPE="s">	<VALUE>Switch Chip2 Temp</VALUE>	</PROPERTY>
		<PROPERTY NAME="SensorUnitStr" TYPE="s">	<VALUE>unspecified</VALUE>	</PROPERTY>
		<PROPERTY NAME="ReadingRaw" TYPE="rp">	<VALUE>SwitchChip2_temp_monitor.MonSenValue</VALUE>	</PROPERTY>
		<PROPERTY NAME="ReaddingConvert" TYPE="d">	<VALUE>0.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="UpperNonrecoverableConvert" TYPE="d">	<VALUE>0.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="UpperCriticalConvert" TYPE="d">	<VALUE>0.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="UpperNoncriticalConvert" TYPE="d">	<VALUE>105.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="LowerNonrecoverableConvert" TYPE="d">	<VALUE>0.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="LowerCriticalConvert" TYPE="d">	<VALUE>0.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="LowerNoncriticalConvert" TYPE="d">	<VALUE>0.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="PositiveHysteresisConvert" TYPE="d">	<VALUE>2.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="NegativeHysteresisConvert" TYPE="d">	<VALUE>2.0</VALUE>	</PROPERTY>
		<PROPERTY NAME="Health" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="ReadingStatus" TYPE="y">	<VALUE>0x00</VALUE>	</PROPERTY>
		<PROPERTY NAME="AssertStatus" TYPE="q">	<VALUE>0x0000</VALUE>	</PROPERTY>
		<PROPERTY NAME="DeassertStatus" TYPE="q">	<VALUE>0x0000</VALUE>	</PROPERTY>
	</OBJECT>
	<!-- Switch芯片温度 -->
	<OBJECT NAME="SwitchChip2_temp_monitor" CLASS="TempMonitor" TYPE="Logical">
		<PROPERTY NAME="SelfTestObject" TYPE="ro">	<VALUE>::succ_dev_test_pwrgd</VALUE>	</PROPERTY>
		<PROPERTY NAME="MonSenValue" TYPE="q">	<VALUE>60</VALUE>	</PROPERTY>
		<PROPERTY NAME="DebouncedCfg" TYPE="ro">	<VALUE>::dbd_midavg_s6</VALUE>	</PROPERTY>
		<PROPERTY NAME="TempValue" TYPE="rp"> <VALUE>PXE89104Switch2.Temp</VALUE>	</PROPERTY>
	</OBJECT>
	
	
	
guint8 swchiptemp_offset_writedata_tbl [12][8] = {
    {0x03, 0x7C, 0x3C, 0x40, 0xFF, 0xE0, 0x00, 0x04},
    {0x03, 0x7C, 0x3C, 0x41, 0x00, 0x21, 0x4C, 0x0B},
    {0x03, 0x7C, 0x3C, 0x42, 0x00, 0x00, 0x00, 0x01},
    {0x03, 0x7C, 0x3C, 0x40, 0xFF, 0xE0, 0x00, 0x08},
    {0x03, 0x7C, 0x3C, 0x41, 0x00, 0x01, 0x00, 0x07},
    {0x03, 0x7C, 0x3C, 0x42, 0x00, 0x00, 0x00, 0x01},
    {0x03, 0x7C, 0x3C, 0x40, 0xFF, 0xE0, 0x00, 0x0C},
    {0x03, 0x7C, 0x3C, 0x41, 0x00, 0x22, 0x4C, 0x14},
    {0x03, 0x7C, 0x3C, 0x42, 0x00, 0x00, 0x00, 0x01},
    {0x03, 0x7C, 0x3C, 0x40, 0xFF, 0xE0, 0x00, 0x10},
    {0x03, 0x7C, 0x3C, 0x42, 0x00, 0x00, 0x00, 0x02},
    {0x04, 0x7C, 0x3C, 0x41},
};
 
guint8 all_sw_chip_temp_get(void)
{
    gint32 ret = RET_ERR;
    guint8 read_data[4] = {0};
    guint8 sw_real_temp = 0;
    gint32 sw_origin_temp = 0;
    GSList *obj_list = NULL;
    GSList *node = NULL;
    OBJ_HANDLE pxe89104_switch_handle = 0;
    OBJ_HANDLE switch_chip_handle = 0;
    const gchar *switch_chip_name = NULL;
    guint8 offset_writedata_tbl_row = 0;
    guint8 offset_writedata_tbl_col = 0;
 
    ret = dfl_get_object_list(CLASS_PXE89104_SWITCH, &obj_list);
    if (ret != RET_OK) {
        debug_log(DLOG_ERROR, "%s : get pxe89104 switch list failed, ret=%d", __FUNCTION__, ret);
        return RET_ERR;
    }
 
    for (node = obj_list; node; node = node->next) {
        pxe89104_switch_handle = (OBJ_HANDLE)node->data;
        ret = dfl_get_referenced_object(pxe89104_switch_handle, PROPERTY_REF_CHIP_OBJECT, &switch_chip_handle);
        if (ret != DFL_OK) {
            debug_log(DLOG_ERROR, "%s get the reference switch chip fail, ret=%d",dfl_get_object_name(pxe89104_switch_handle) , ret);
            continue;
        }
 
        switch_chip_name = dfl_get_object_name(switch_chip_handle);
        offset_writedata_tbl_row = sizeof(swchiptemp_offset_writedata_tbl)/sizeof(swchiptemp_offset_writedata_tbl[0]);
        offset_writedata_tbl_col = sizeof(swchiptemp_offset_writedata_tbl[0])/sizeof(swchiptemp_offset_writedata_tbl[0][0]);
 
        for (guint8 i = 0; i < offset_writedata_tbl_row; i++) {
            if (i == (offset_writedata_tbl_row-1)) {
                // *(swchiptemp_offset_writedata_tbl + i) + 0 等价于 &swchiptemp_offset_writedata_tbl[i][0]
                ret = dfl_chip_blkwrite(switch_chip_name, 0, offset_writedata_tbl_col-4, (gpointer)(&swchiptemp_offset_writedata_tbl[i][0]));  
            } else {
                ret = dfl_chip_blkwrite(switch_chip_name, 0, offset_writedata_tbl_col, (gpointer)(&swchiptemp_offset_writedata_tbl[i][0]));
            }
            if (ret != DFL_OK) {
                debug_log(DLOG_ERROR, "[%s] write swchiptemp_offset_writedata_tbl[%d] failed with result:%d", switch_chip_name, i+1, ret);
                break;
            }
        }
 
        ret = dfl_chip_blkread(dfl_get_object_name(switch_chip_handle), 0, 4, read_data);
        if (ret != DFL_OK) {
            debug_log(DLOG_ERROR, "read swchip temp failed, ret=%d", ret);
            continue;
        }
        debug_log(DLOG_INFO, "read %s temp raw data=%d,%d,%d,%d", switch_chip_name, read_data[0], read_data[1], read_data[2], read_data[3]); 
 
        sw_origin_temp = (read_data[2] << 8) | (read_data[3]);
        sw_origin_temp &= 0x07FF;
        sw_real_temp = (guint8)(366.812 - ((float)sw_origin_temp)*0.2454);
        debug_log(DLOG_INFO, "boardcom pxe89104 sw_real_temp=%d", sw_real_temp);
 
        ret = dal_set_property_value_byte(pxe89104_switch_handle, PROPERTY_PXE89104_SWITCH_TEMP, sw_real_temp, DF_NONE);
        if (ret != RET_OK) {
            debug_log(DLOG_ERROR, "set boardcom pxe89104 sw_real_temp to xml failed, ret=%d", ret);
            continue;
        }
    }
 
    g_slist_free(obj_list);
    return RET_OK;
}
 
 
LOCAL void sw_chip_temp_get_task(void)
{
    const guint32 sw_scan_time = 3000;
 
    (void)prctl(PR_SET_NAME, (unsigned long)"SwTempGetTask");
 
    for (;;) {
        vos_task_delay(sw_scan_time);
        (void)all_sw_chip_temp_get();
    }
}


gint32 sw_board_start(void)
{
    TASKID task_id_sw_temp = 0;
    gint32 ret;
 
    ret = vos_task_create(&task_id_sw_temp, "SwTempGet", (TASK_ENTRY)sw_chip_temp_get_task, NULL, DEFAULT_PRIORITY);
    if (ret != VOS_OK) {
        debug_log(DLOG_ERROR, "%s : create sw temp get task thread failed(%d).", __FUNCTION__, ret);
    }
 
    debug_log(DLOG_INFO, "%s:switch board info start", __FUNCTION__);
    return RET_OK;
}
